Doing research on how to track a ping pong ball in motion using computer vision. Will be using python and OpenCV to accomplish this.

Tutorials:
https://www.pyimagesearch.com/2015/09/14/ball-tracking-with-opencv/
https://www.youtube.com/watch?v=MkcUgPhOlP8


Research articles on algorithms: 
https://towardsdatascience.com/ball-detection-with-computer-vision-ai-in-sports-f9ef743e0ef1
https://www.hindawi.com/journals/jhe/2021/5529981/
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8137303/


Other things to explore: 
algorithms from computer vision class (talk to Professor Stewart for ideas)



Spoke to Professor Stewart and he had some great insights on using computer vision for our project:
1. He recommended the KLT (Kanade–Lucas–Tomasi) algorithm for tracking the ping pong ball in motion (mentioned a few other algorithms and said to stay away from those since they are too slow for our application)
2. He recommended that we use orange ping pong balls for testing since he expects our apartment will not have nice, even lighting and it will help track the ball easier
3. He said tracking the trajectory of the ball will be a bit tricky but he beleives in us


UPDATE: This problem is going to require a lot of research, trial, and error:
I am currently doing research here: https://learnopencv.com/object-tracking-using-opencv-cpp-python/ 

UPDATE: Motion test videos loaded in and simple motion detection works well
This tutorial is very helpful: https://pyimagesearch.com/2015/09/14/ball-tracking-with-opencv/


3/18 UPDATE: ball tracking works on vidoes shot on iPhone at 30 FPS but struggles on laptop camera. Had to get new testing data

3/22 UPDATE: Spoke to Professor Turner and he suggested we look into retroreflective tape/paint to track ball easily. Definitely a cool thing to look into and possibly enhance the effectiveness of our detection algorithms

3/25 UPDATE: Found some very interesting information online when trying to figure out why the mp4 videos feel like they process faster than the mov files. It appears that it may do with how compressed each video type is, and how long it takes to decode frames. 
I found a very good tutorial online that talks about how to speed up video processing speeds in OpenCV, which will be very interesting to look into later: https://pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/
They also have links to tutorials they have for increasing the FPS from webcam feeds and for increasing the FPS on a Raspberry Pi, which are both of interest to me. Including both links here for later:
https://pyimagesearch.com/2015/12/21/increasing-webcam-fps-with-python-and-opencv/
https://pyimagesearch.com/2015/12/28/increasing-raspberry-pi-fps-with-python-and-opencv/